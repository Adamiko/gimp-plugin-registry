#! /bin/sh /usr/share/dpatch/dpatch-run
## refocus_gimp2.4-clean.dpatch by Bernd Zeimetz <bernd@bzed.de>
##
## DP: Thanks to Baptiste Carvello <baptiste13@altern.org>.

@DPATCH@
diff -urNad gimp-plugin-registry~/refocus/src/src/gimppreview.c gimp-plugin-registry/refocus/src/src/gimppreview.c
--- gimp-plugin-registry~/refocus/src/src/gimppreview.c	2006-12-16 23:28:49.000000000 +0100
+++ gimp-plugin-registry/refocus/src/src/gimppreview.c	2007-10-15 00:55:18.000000000 +0200
@@ -90,7 +90,7 @@
 #define CHECK_DARK  ((guchar) (1.3 / 3.0 * 255))
 #define CHECK_LIGHT ((guchar) (1.8 / 3.0 * 255))
 
-static guint gimp_preview_signals[LAST_SIGNAL] = { 0 };
+static guint RF_gimp_preview_signals[LAST_SIGNAL] = { 0 };
 
 
 /*
@@ -320,12 +320,12 @@
        * The user wants a fixed size preview.  We'll calculate this
        * during the init routine.
        */
-    case PREVIEW_FIXED_SIZE:
-      preview_size = PREVIEW_FIXED_SIZE;
+    case RF_PREVIEW_FIXED_SIZE:
+      preview_size = RF_PREVIEW_FIXED_SIZE;
       break;
 
       /* Caller wants use to use the default preview window size. */
-    case PREVIEW_DEFAULT_SIZE:
+    case RF_PREVIEW_DEFAULT_SIZE:
       preview_size = PREVIEW_SIZE;
       break;
 
@@ -370,12 +370,12 @@
   gtk_misc_set_alignment (GTK_MISC (PREVIEW_DATA (preview)->image), 0.5, 0.5);
   gtk_container_add (GTK_CONTAINER (event_box),
                      PREVIEW_DATA (preview)->image);
-  gimp_preview_image_set_size (preview, preview_width, preview_height);
+  RF_gimp_preview_image_set_size (preview, preview_width, preview_height);
   frame = gtk_frame_new (NULL);
   PREVIEW_DATA (preview)->event_box = event_box;
   gtk_widget_set_parent (event_box, GTK_WIDGET (preview));
 
-  if (preview_size != PREVIEW_FIXED_SIZE)
+  if (preview_size != RF_PREVIEW_FIXED_SIZE)
     {
       gtk_widget_set_events (event_box,
                              GDK_BUTTON_PRESS_MASK |
@@ -383,7 +383,7 @@
                              GDK_POINTER_MOTION_HINT_MASK |
                              GDK_BUTTON_MOTION_MASK);
       g_signal_connect (G_OBJECT (event_box), "event",
-                        G_CALLBACK (gimp_preview_event), (gpointer) preview);
+                        G_CALLBACK (RF_gimp_preview_event), (gpointer) preview);
     }
 
   PREVIEW_DATA (preview)->progress_bar = gtk_progress_bar_new ();
@@ -421,11 +421,11 @@
 
       g_signal_connect (G_OBJECT (PREVIEW_DATA (preview)->button_minus),
                         "clicked",
-                        G_CALLBACK (gimp_preview_minus_callback),
+                        G_CALLBACK (RF_gimp_preview_minus_callback),
                         (gpointer) preview);
       g_signal_connect (G_OBJECT (PREVIEW_DATA (preview)->button_plus),
                         "clicked",
-                        G_CALLBACK (gimp_preview_plus_callback),
+                        G_CALLBACK (RF_gimp_preview_plus_callback),
                         (gpointer) preview);
 
       gtk_widget_show (PREVIEW_DATA (preview)->button_minus);
@@ -603,8 +603,8 @@
       gtk_widget_set_sensitive (PREVIEW_DATA (preview)->button_minus, TRUE);
     }
 
-  gimp_preview_recompute_sizes (preview, new_scale);
-  gimp_preview_update_preview (preview);
+  RF_gimp_preview_recompute_sizes (preview, new_scale);
+  RF_gimp_preview_update_preview (preview);
 }
 
 
@@ -638,8 +638,8 @@
   if (PREVIEW_DATA (preview)->scale_n == PREVIEW_SCALE_LAST - 1)
     gtk_widget_set_sensitive (PREVIEW_DATA (preview)->button_plus, TRUE);
 
-  gimp_preview_recompute_sizes (preview, new_scale);
-  gimp_preview_update_preview (preview);
+  RF_gimp_preview_recompute_sizes (preview, new_scale);
+  RF_gimp_preview_update_preview (preview);
 }
 
 
@@ -679,7 +679,7 @@
 
           gtk_grab_add (widget);
 
-          gimp_preview_update_preview (preview);
+          RF_gimp_preview_update_preview (preview);
         }
       break;
 
@@ -689,7 +689,7 @@
           gtk_grab_remove (widget);
           PREVIEW_DATA (preview)->in_drag = FALSE;
 
-          gimp_preview_update_preview (preview);
+          RF_gimp_preview_update_preview (preview);
         }
 
       break;
@@ -714,7 +714,7 @@
                    MAX (0,
                         i2p (preview->drawable->height - 1, preview->scale)
                         - preview->height));
-          gimp_preview_update_preview (preview);
+          RF_gimp_preview_update_preview (preview);
         }
       break;
 
@@ -748,7 +748,7 @@
   const gint image_height =
     i2p (preview->drawable->height - 1, new_scale) + 1;
 
-  gimp_preview_image_set_size (preview, image_width, image_height);
+  RF_gimp_preview_image_set_size (preview, image_width, image_height);
   preview->scale = new_scale;
   preview->preview_x =
     CLAMP (i2p (im_center_x, new_scale) - preview->width / 2,
@@ -798,8 +798,8 @@
   preview_event.scaled_data = preview->buffer;
 
   g_signal_emit (GTK_OBJECT (preview),
-                 gimp_preview_signals[UPDATE_PREVIEW], 0, &preview_event);
-  gimp_preview_force_redraw (preview);
+                 RF_gimp_preview_signals[UPDATE_PREVIEW], 0, &preview_event);
+  RF_gimp_preview_force_redraw (preview);
 }
 
 /* Update the preview. 
@@ -993,7 +993,7 @@
 
   for (row = 0; row < preview->height; row++)
     {
-      gimp_preview_draw_row (preview,
+      RF_gimp_preview_draw_row (preview,
                              PREVIEW_DATA (preview)->current_event_id,
                              GIMP_RGBA_IMAGE, row,
                              &(preview->buffer[row * preview->width * 4]));
@@ -1049,11 +1049,11 @@
   printf ("Scheduled update %d\n", PREVIEW_DATA (preview)->current_event_id);
 #endif
   g_idle_add_full (G_PRIORITY_LOW,
-                   gimp_preview_update_preview_idle_fun, preview, NULL);
+                   RF_gimp_preview_update_preview_idle_fun, preview, NULL);
 }
 
 void
-gimp_preview_pixbuf_draw_row (GdkPixbuf * pixbuf, guchar * data,
+RF_gimp_preview_pixbuf_draw_row (GdkPixbuf * pixbuf, guchar * data,
                               gint x, gint y, gint w)
 {
   const gint n_chars_per_pixel =
@@ -1239,7 +1239,7 @@
           break;
         }
 
-      gimp_preview_image_draw_row (PREVIEW_DATA (preview)->image, buf_start,
+      RF_gimp_preview_image_draw_row (PREVIEW_DATA (preview)->image, buf_start,
                                    0, row, width);
     }
   return (return_status);
@@ -1432,13 +1432,13 @@
         {
           const gint check_idx = (y / CHECK_SIZE) & 1;
 
-          gimp_preview_image_draw_row (PREVIEW_DATA (preview)->image,
+          RF_gimp_preview_image_draw_row (PREVIEW_DATA (preview)->image,
                                        buf_start[check_idx],
                                        0, y - preview->preview_y, width);
 
         }
       /* Perhaps this is a bit expensive when used internally */
-      gimp_preview_force_redraw (preview);
+      RF_gimp_preview_force_redraw (preview);
     }
   return (return_status);
 }
diff -urNad gimp-plugin-registry~/refocus/src/src/gimppreview.h gimp-plugin-registry/refocus/src/src/gimppreview.h
--- gimp-plugin-registry~/refocus/src/src/gimppreview.h	2006-12-16 23:00:31.000000000 +0100
+++ gimp-plugin-registry/refocus/src/src/gimppreview.h	2007-10-15 00:55:18.000000000 +0200
@@ -20,8 +20,8 @@
  * Version $Id: gimppreview.h,v 1.1.1.1 2003/01/30 21:30:18 ernstl Exp $
  */
 
-#ifndef GIMP_PREVIEW_H
-#define GIMP_PREVIEW_H
+#ifndef RF_GIMP_PREVIEW_H
+#define RF_GIMP_PREVIEW_H
 
 #include <gtk/gtk.h>
 #include <gdk-pixbuf/gdk-pixbuf.h>
diff -urNad gimp-plugin-registry~/refocus/src/src/refocus.c gimp-plugin-registry/refocus/src/src/refocus.c
--- gimp-plugin-registry~/refocus/src/src/refocus.c	2006-12-16 23:28:13.000000000 +0100
+++ gimp-plugin-registry/refocus/src/src/refocus.c	2007-10-15 00:55:18.000000000 +0200
@@ -132,7 +132,7 @@
      gint * nreturn_vals, GimpParam ** return_vals)
 {
   static GimpParam values[1];
-  GimpRunModeType run_mode;
+  GimpRunMode run_mode;
   GimpPDBStatusType status = GIMP_PDB_SUCCESS;
 
   (void) name;                  /* Shut up warnings about unused parameters. */
@@ -337,7 +337,7 @@
   (void) data;
   set_busy_cursor (widget, TRUE);
   update_matrix ();
-  gimp_preview_update (GIMP_PREVIEW (my_widgets.preview));
+  RF_gimp_preview_update (RF_GIMP_PREVIEW (my_widgets.preview));
   set_busy_cursor (widget, FALSE);
 }
 
@@ -394,7 +394,7 @@
                                       im_width, im_height);
       tile_sink_init_for_preview (&sink, drawable, image_x, image_y,
                                   im_width, im_height);
-      gimp_preview_progress_set_fraction (GIMP_PREVIEW (my_widgets.preview),
+      RF_gimp_preview_progress_set_fraction (RF_GIMP_PREVIEW (my_widgets.preview),
                                           event->event_id, 0);
       bd_closure_init (&update_progress_closure,
                        preview_progress_update_fun,
@@ -491,7 +491,7 @@
 
   /* Outbox:Preview */
   vpaned = gtk_vpaned_new ();
-  preview = my_widgets.preview = gimp_preview_new (drawable);
+  preview = my_widgets.preview = RF_gimp_preview_new (drawable);
   g_signal_connect (G_OBJECT (preview), "update_preview",
                     G_CALLBACK (preview_callback), (gpointer) NULL);
   gtk_paned_pack1 (GTK_PANED (outbox), vpaned, TRUE, TRUE);
@@ -584,7 +584,7 @@
 
   gtk_widget_show (dlg);
   redraw_all ();
-  gimp_preview_update (GIMP_PREVIEW (preview));
+  RF_gimp_preview_update (RF_GIMP_PREVIEW (preview));
   gtk_main ();
   gdk_flush ();
   return run_flag;
